// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: api.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	LoginReq
	LoginResp
	JobReq
	JobResp
	Users
	UserReq
	UserResp
	User
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Api service

type ApiService interface {
	Job(ctx context.Context, in *JobReq, opts ...client.CallOption) (*JobResp, error)
	User(ctx context.Context, in *UserReq, opts ...client.CallOption) (*UserResp, error)
}

type apiService struct {
	c    client.Client
	name string
}

func NewApiService(name string, c client.Client) ApiService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "api"
	}
	return &apiService{
		c:    c,
		name: name,
	}
}

func (c *apiService) Job(ctx context.Context, in *JobReq, opts ...client.CallOption) (*JobResp, error) {
	req := c.c.NewRequest(c.name, "Api.Job", in)
	out := new(JobResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiService) User(ctx context.Context, in *UserReq, opts ...client.CallOption) (*UserResp, error) {
	req := c.c.NewRequest(c.name, "Api.User", in)
	out := new(UserResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Api service

type ApiHandler interface {
	Job(context.Context, *JobReq, *JobResp) error
	User(context.Context, *UserReq, *UserResp) error
}

func RegisterApiHandler(s server.Server, hdlr ApiHandler, opts ...server.HandlerOption) {
	type api interface {
		Job(ctx context.Context, in *JobReq, out *JobResp) error
		User(ctx context.Context, in *UserReq, out *UserResp) error
	}
	type Api struct {
		api
	}
	h := &apiHandler{hdlr}
	s.Handle(s.NewHandler(&Api{h}, opts...))
}

type apiHandler struct {
	ApiHandler
}

func (h *apiHandler) Job(ctx context.Context, in *JobReq, out *JobResp) error {
	return h.ApiHandler.Job(ctx, in, out)
}

func (h *apiHandler) User(ctx context.Context, in *UserReq, out *UserResp) error {
	return h.ApiHandler.User(ctx, in, out)
}

// Client API for LoginService service

type LoginService interface {
	Login(ctx context.Context, in *LoginReq, opts ...client.CallOption) (*LoginResp, error)
}

type loginService struct {
	c    client.Client
	name string
}

func NewLoginService(name string, c client.Client) LoginService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "api"
	}
	return &loginService{
		c:    c,
		name: name,
	}
}

func (c *loginService) Login(ctx context.Context, in *LoginReq, opts ...client.CallOption) (*LoginResp, error) {
	req := c.c.NewRequest(c.name, "LoginService.Login", in)
	out := new(LoginResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LoginService service

type LoginServiceHandler interface {
	Login(context.Context, *LoginReq, *LoginResp) error
}

func RegisterLoginServiceHandler(s server.Server, hdlr LoginServiceHandler, opts ...server.HandlerOption) {
	type loginService interface {
		Login(ctx context.Context, in *LoginReq, out *LoginResp) error
	}
	type LoginService struct {
		loginService
	}
	h := &loginServiceHandler{hdlr}
	s.Handle(s.NewHandler(&LoginService{h}, opts...))
}

type loginServiceHandler struct {
	LoginServiceHandler
}

func (h *loginServiceHandler) Login(ctx context.Context, in *LoginReq, out *LoginResp) error {
	return h.LoginServiceHandler.Login(ctx, in, out)
}
